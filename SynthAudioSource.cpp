#include "SynthAudioSource.h"


// struct ScannerSound : public SynthesiserSound {
//   ScannerSound() {}
//   bool appliesToNote (int /*midiNoteNumber*/) override    { return true; }
//   bool appliesToChannel (int /*midiChannel*/) override    { return true; }
// };

SynthAudioSource::SynthAudioSource (MidiKeyboardState& keyState)  : keyboardState (keyState) {
  for (auto i = 0; i < 4; ++i) {
    synth.addVoice (new ScannerVoice());
  }
  
  synth.clearSounds();
  synth.addSound (new ScannerSound());
}

void SynthAudioSource::prepareToPlay (int /*samplesPerBlockExpected*/, double sampleRate) override {
  midiCollector.reset (sampleRate);  
  synth.setCurrentPlaybackSampleRate (sampleRate);
}

void SynthAudioSource::releaseResources() override {}

void SynthAudioSource::getNextAudioBlock (const AudioSourceChannelInfo& bufferToFill) override {
  // the synth always adds its output to the audio buffer, so we have to clear it
  // first..
  bufferToFill.clearActiveBufferRegion();
  
  // fill a midi buffer with incoming messages from the midi input.
  MidiBuffer incomingMidi;
  midiCollector.removeNextBlockOfMessages (incomingMidi, bufferToFill.numSamples);
  
  // pass these messages to the keyboard state so that it can update the component
  // to show on-screen which keys are being pressed on the physical midi keyboard.
  // This call will also add midi messages to the buffer which were generated by
  // the mouse-clicking on the on-screen keyboard.
  keyboardState.processNextMidiBuffer (incomingMidi, 0, bufferToFill.numSamples, true);
  
  // and now get the synth to process the midi events and generate its output.
  synth.renderNextBlock (*bufferToFill.buffer, incomingMidi, 0, bufferToFill.numSamples);
}

/*
  audioDeviceManager.addAudioCallback (&audioSourcePlayer);
  audioDeviceManager.addMidiInputDeviceCallback ({}, &(synthAudioSource.midiCollector));

  audioDeviceManager.removeMidiInputDeviceCallback ({}, &(synthAudioSource.midiCollector));
  audioDeviceManager.removeAudioCallback (&audioSourcePlayer);
  audioDeviceManager.removeAudioCallback (&liveAudioDisplayComp);
*/
