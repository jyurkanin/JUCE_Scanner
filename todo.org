


* Bruh
  75 and 79 sounded fucking nuts.

* TODO Create VST3 plugin.
* DONE DEbug click
  Clicks when changing notes.
  I verified the envelope is continuous no matter what, so thats not the problem.
  Idk wtf the problem is.
  The problem was pulse audio being retarded.
  The problem mostly goes away with jack.
  There is still some buffer underrun when playing notes retardedly fast.
  Could solve this by using a lower latency solver.
  Will do.
  
  Now using symplectic euler. Lowest latency solver. Somehow even better than the regular euler.
  Still getting some underrun.
  Could experiment with eigen based vector types in the hope that
  it allows for better vectorization.
  
  I was thinking about creating a lock-free queue for an audio thread/worker thread setup
  But this would introduce latency. Bad. I should ask Skylar how he solves this problem.
  
  Actually I definitely need to remove the mutex in the
  audio thread and use some kind of atomic operation
  to replace it or something.
  
  Create two node_pos buffers. Have a pointer to a pointer to hold the one
  currently being used by the ODE. Use an atomic variable to indicate which 
  buffer is being used. Another atomic variable to signal that a switch should happen.
  I think this would work.
  
  Dont need a ptr to a ptr. Can just change node_pos[2][num_nodes] to node_pos[4][num_nodes]
  and change which index is adressed when you need to swap. very smart. Good job justin.
  
  What do? Think about the atomic operations and see if there could be some access pattern
  that causes problems.
  
** Update: Only hearing a click when changing notes. It's a pitch related problem I guess.
   
   It was just buffer underrun.
   Not. There is another.

** Click after every note with the sequencer. wtf.
   Something is happening with note off.
   I wasnt assigning the entire audio buffer. Massive amounts of dropout were happening.

* TODO Figure out how to remove x axis interpolation

* DONE Investigate First Order Symplectic Integrator
  Like euler's method but slightly different.
  You noticed for some reason that your old synth code was stable
  when you used an integrator that was "wrong" vs. using euler.
  Turns out the "wrong" code was actually a 1st order symplectic integrator.
  
  Here's a test. For 1,000,000 function evaluations, here is the total runtime in ms
  
  Euler Duration 1377
  Symp Euler Duration 1145
  RK4 Duration 7389
  
  Symp appears to be just as stable as RK4. Will switch to symp.
  Symp might be giving slightly more high freqency stuff. But I'm not convinced.

* DONE Harshness solved
  Wavetable is updated in the audio thread instead of in a separate thread.
  Update happens at the audio rate leading to very smooth changing waveform.
  
* TODO Add 3D fairlight visualization
  cool receding 3d wave thing (opengl)
  
* DONE Respond to midi
  Mostly for personal use. I dont think this will have a use as plugin. 
  Mostly done. Juce made it easy.
  
* DONE Portamento
  Mono legato mode still.
  
* DONE Add retrigger button
* DONE Add some kind of fun nonlinearity
  Hmm even and odd distortion.
  stiffness = (x^3 - x)
  Result is chaotic and cool
  Just learned what passivity means.
  No, I dont think we will add a nonlinearity right now. :)

* DONE Menu for selecting a wavefile instead of a fucking slider
  

* DONE Explore Wavetable Interpolation
  Tried sinc interpolation, but didn't hear any improvements.
  Using linear now. The reason I dont think sinc worked is because 
  the wavetable is sampled at less than 44100 depending on pitch,
  so we won't be seeing any improvements as sinc filter just lowpasses
  the wavetable.
* DONE Polynomial interpolation in the tick function?
  Possibly lead to smooth sound. Currently sounds kinda harsh and idk why.
  I think I tried this actually year ago in the original synth code and it wasn't very itneresting.
  Effect is pretty negligible.

  
